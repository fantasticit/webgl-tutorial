(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{33:function(s,r,a){"use strict";a.r(r);var n={components:{}},t=a(0),e=Object(t.a)(n,function(){var s=this,r=s.$createElement,a=s._self._c||r;return a("section",[a("h1",[s._v("使用 WebGL 创建 2D 内容")]),s._v(" "),a("p",[s._v("一旦 WebGL 上下文创建成功，便可以在这个上下文中绘制内容了。")]),s._v(" "),a("h2",[s._v("1. 渲染场景")]),s._v(" "),s._m(0),s._v(" "),a("h2",[s._v("2. 着色器")]),s._v(" "),s._m(1),s._v(" "),a("h3",[s._v("2.1 顶点着色器")]),s._v(" "),s._m(2),s._v(" "),s._m(3),s._v(" "),s._m(4),s._v(" "),s._m(5),s._v(" "),a("h3",[s._v("2.2 片段着色器")]),s._v(" "),s._m(6),s._v(" "),s._m(7),s._v(" "),a("h3",[s._v("2.3 初始化着色器")]),s._v(" "),s._m(8),s._v(" "),s._m(9),s._v(" "),s._m(10),s._v(" "),s._m(11),s._v(" "),a("p",[s._v("举个例子：")]),s._v(" "),s._m(12),s._v(" "),s._m(13),s._v(" "),s._m(14),s._v(" "),a("h2",[s._v("3. 绘制正方形")]),s._v(" "),a("block-demo",{attrs:{tip:"",source:"const app = document.querySelector('#app')\nconst canvas = document.createElement('canvas')\ncanvas.width = 400\ncanvas.height = 300\n\napp.appendChild(canvas)\n\nconst gl = canvas.getContext('webgl')\n\n// 顶点着色器\nconst vsSource = `\n  attribute vec4 aVertexPosition;\n\n  uniform mat4 uModelViewMatrix;\n  uniform mat4 uProjectionMatrix;\n\n  void main() {\n    gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n  }\n`\n\n// 片段着色器\nconst fsSource = `\n  void main() {\n    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n  }\n`\n\n// 着色器程序\nconst shaderProgram = initShaderProgram(gl, vsSource, fsSource)\nconst programInfo = {\n  program: shaderProgram,\n  attribLocations: {\n    vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition')\n  },\n  uniformLocations: {\n    projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\n    modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix')\n  }\n}\n\n// 创建缓冲区\nconst buffers = initBuffers(gl)\n//  绘制场景\ndrawScene(gl, programInfo, buffers)\n\n// 加载 着色器\nfunction loadShader(gl, type, source) {\n  // 0. 创建指定类型的着色器\n  const shader = gl.createShader(type)\n\n  // 1. 上传源码\n  gl.shaderSource(shader, source)\n\n  // 2. 编译着色器\n  gl.compileShader(shader)\n\n  // 检测编译状态\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    alert('编译失败！', gl.getShaderInfoLog(shader))\n    gl.deleteShader(shader)\n    return null\n  }\n\n  return shader\n}\n\n// 链接着色器程序\nfunction initShaderProgram(gl, vsSouce, fsSource) {\n  // 0. 创建两类型着色器\n  const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource)\n  const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource)\n\n  // 1. 附加着色器程序\n  const shaderProgram = gl.createProgram()\n  gl.attachShader(shaderProgram, vertexShader)\n  gl.attachShader(shaderProgram, fragmentShader)\n  gl.linkProgram(shaderProgram)\n\n  // 检测链接状态\n  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n    alert('初始化着色器程序失败', gl.getProgramInfoLog(shaderProgram))\n    return null\n  }\n\n  return shaderProgram\n}\n\nfunction initBuffers(gl) {\n  // 0. 创建 buffer 存储正方形顶点\n  const buffer = gl.createBuffer()\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\n\n  // 1. 将顶点传入 WebGL\n  const positions = [1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0, -1.0]\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW)\n\n  return { position: buffer }\n}\n\n// 绘制场景\nfunction drawScene(gl, programInfo, buffers, z = 8.0) {\n  gl.clearColor(0.0, 0.0, 0.0, 1)\n  gl.clearDepth(1) // 清空\n  gl.enable(gl.DEPTH_TEST)\n  gl.depthFunc(gl.LEQUAL)\n\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\n  // 利用 gl-matrix 创建一个 透视投影相机\n  const feildOfView = (45 * Math.PI) / 180\n  const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight\n  const zNear = 0.1\n  const zFar = 100.0\n  const projectionMatrix = mat4.create()\n  mat4.perspective(projectionMatrix, feildOfView, aspect, zNear, zFar)\n\n  const modelViewMatrix = mat4.create()\n  mat4.translate(modelViewMatrix, modelViewMatrix, [-0.0, 0.0, -z])\n\n  {\n    const numComponents = 2\n    const type = gl.FLOAT\n    const normalize = false\n    const stride = 0\n    const offset = 0\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position)\n    gl.vertexAttribPointer(\n      programInfo.attribLocations.vertexPosition,\n      numComponents,\n      type,\n      normalize,\n      stride,\n      offset\n    )\n    gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition)\n  }\n\n  // 告知 WebGL 使用 着色器 绘制\n  gl.useProgram(programInfo.program)\n\n  gl.uniformMatrix4fv(\n    programInfo.uniformLocations.projectionMatrix,\n    false,\n    projectionMatrix\n  )\n  gl.uniformMatrix4fv(\n    programInfo.uniformLocations.modelViewMatrix,\n    false,\n    modelViewMatrix\n  )\n\n  {\n    const offset = 0\n    const vertexCount = 4\n    gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount)\n  }\n}\n"}},[a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" app = "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".querySelector("),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'#app'")]),s._v(")\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" canvas = "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".createElement("),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'canvas'")]),s._v(")\ncanvas.width = "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("400")]),s._v("\ncanvas.height = "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("300")]),s._v("\n\napp.appendChild(canvas)\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" gl = canvas.getContext("),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'webgl'")]),s._v(")\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 顶点着色器")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" vsSource = "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`\n  attribute vec4 aVertexPosition;\n\n  uniform mat4 uModelViewMatrix;\n  uniform mat4 uProjectionMatrix;\n\n  void main() {\n    gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n  }\n`")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 片段着色器")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" fsSource = "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`\n  void main() {\n    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n  }\n`")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 着色器程序")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" shaderProgram = initShaderProgram(gl, vsSource, fsSource)\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" programInfo = {\n  "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("program")]),s._v(": shaderProgram,\n  "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("attribLocations")]),s._v(": {\n    "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("vertexPosition")]),s._v(": gl.getAttribLocation(shaderProgram, "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'aVertexPosition'")]),s._v(")\n  },\n  "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("uniformLocations")]),s._v(": {\n    "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("projectionMatrix")]),s._v(": gl.getUniformLocation(shaderProgram, "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'uProjectionMatrix'")]),s._v("),\n    "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("modelViewMatrix")]),s._v(": gl.getUniformLocation(shaderProgram, "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'uModelViewMatrix'")]),s._v(")\n  }\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 创建缓冲区")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" buffers = initBuffers(gl)\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//  绘制场景")]),s._v("\ndrawScene(gl, programInfo, buffers)\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 加载 着色器")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("loadShader")]),s._v("("),a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("gl, type, source")]),s._v(") ")]),s._v("{\n  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 0. 创建指定类型的着色器")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" shader = gl.createShader(type)\n\n  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1. 上传源码")]),s._v("\n  gl.shaderSource(shader, source)\n\n  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2. 编译着色器")]),s._v("\n  gl.compileShader(shader)\n\n  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 检测编译状态")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    alert("),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'编译失败！'")]),s._v(", gl.getShaderInfoLog(shader))\n    gl.deleteShader(shader)\n    "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n  }\n\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" shader\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 链接着色器程序")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("initShaderProgram")]),s._v("("),a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("gl, vsSouce, fsSource")]),s._v(") ")]),s._v("{\n  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 0. 创建两类型着色器")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource)\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource)\n\n  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1. 附加着色器程序")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" shaderProgram = gl.createProgram()\n  gl.attachShader(shaderProgram, vertexShader)\n  gl.attachShader(shaderProgram, fragmentShader)\n  gl.linkProgram(shaderProgram)\n\n  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 检测链接状态")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n    alert("),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'初始化着色器程序失败'")]),s._v(", gl.getProgramInfoLog(shaderProgram))\n    "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n  }\n\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" shaderProgram\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("initBuffers")]),s._v("("),a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("gl")]),s._v(") ")]),s._v("{\n  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 0. 创建 buffer 存储正方形顶点")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" buffer = gl.createBuffer()\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\n\n  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1. 将顶点传入 WebGL")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" positions = ["),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1.0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1.0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("-1.0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1.0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1.0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("-1.0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("-1.0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("-1.0")]),s._v("]\n  gl.bufferData(gl.ARRAY_BUFFER, "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Float32Array")]),s._v("(positions), gl.STATIC_DRAW)\n\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" { "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("position")]),s._v(": buffer }\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 绘制场景")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("drawScene")]),s._v("("),a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("gl, programInfo, buffers, z = "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("8.0")])]),s._v(") ")]),s._v("{\n  gl.clearColor("),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0.0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0.0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0.0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(")\n  gl.clearDepth("),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 清空")]),s._v("\n  gl.enable(gl.DEPTH_TEST)\n  gl.depthFunc(gl.LEQUAL)\n\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\n  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 利用 gl-matrix 创建一个 透视投影相机")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" feildOfView = ("),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("45")]),s._v(" * "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Math")]),s._v(".PI) / "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("180")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" aspect = gl.canvas.clientWidth / gl.canvas.clientHeight\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" zNear = "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0.1")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" zFar = "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("100.0")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" projectionMatrix = mat4.create()\n  mat4.perspective(projectionMatrix, feildOfView, aspect, zNear, zFar)\n\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" modelViewMatrix = mat4.create()\n  mat4.translate(modelViewMatrix, modelViewMatrix, ["),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("-0.0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0.0")]),s._v(", -z])\n\n  {\n    "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" numComponents = "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" type = gl.FLOAT\n    "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" normalize = "),a("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" stride = "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" offset = "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position)\n    gl.vertexAttribPointer(\n      programInfo.attribLocations.vertexPosition,\n      numComponents,\n      type,\n      normalize,\n      stride,\n      offset\n    )\n    gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition)\n  }\n\n  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 告知 WebGL 使用 着色器 绘制")]),s._v("\n  gl.useProgram(programInfo.program)\n\n  gl.uniformMatrix4fv(\n    programInfo.uniformLocations.projectionMatrix,\n    "),a("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(",\n    projectionMatrix\n  )\n  gl.uniformMatrix4fv(\n    programInfo.uniformLocations.modelViewMatrix,\n    "),a("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(",\n    modelViewMatrix\n  )\n\n  {\n    "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" offset = "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" vertexCount = "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v("\n    gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount)\n  }\n}\n")])])])],1)},[function(){var s=this,r=s.$createElement,a=s._self._c||r;return a("p",[s._v("首先要明确的是，在 WebGL 上下文中绘制内容时，无论绘制什么，都是把它绘制在一个三维空间里。所以，仍然需要创建 "),a("strong",[s._v("着色器")]),s._v(" ，然后通过 "),a("strong",[s._v("着色器")]),s._v(" 来渲染 "),a("strong",[s._v("场景")]),s._v(" 及 "),a("strong",[s._v("内容")]),s._v("。")])},function(){var s=this,r=s.$createElement,a=s._self._c||r;return a("p",[a("strong",[s._v("着色器")]),s._v(" 是使用 "),a("code",{pre:!0},[s._v("OpenGL ES Shading Language(GLSL)")]),s._v(" 编写的程序。着色器的功能就是记录像素点的位置和颜色。\n绘制 "),a("code",{pre:!0},[s._v("WebGL")]),s._v(" 时有两种着色器-- "),a("code",{pre:!0},[s._v("顶点着色器")]),s._v(" 和 "),a("code",{pre:!0},[s._v("片段着色器")]),s._v(" 。"),a("code",{pre:!0},[s._v("顶点着色器")]),s._v(" 和 "),a("code",{pre:!0},[s._v("片段着色器")]),s._v(" 的几何称之为 "),a("code",{pre:!0},[s._v("着色器程序")]),s._v("。")])},function(){var s=this.$createElement,r=this._self._c||s;return r("p",[this._v("在渲染一个形状时，顶点着色器会在形状的每个顶点运行。顶点着色器负责将输入的顶点转换到 "),r("code",{pre:!0},[this._v("WebGL")]),this._v(" 使用的缩放空间（ClipSpace）坐标系，其中每个轴的坐标范围从 -1.0 到 1.0 ,并且不考虑纵横比，实际尺寸或任何其他因素。")])},function(){var s=this,r=s.$createElement,a=s._self._c||r;return a("p",[s._v("顶点着色器对顶点坐标进行转换时，会在每个顶点的基础上进行调整计算，然后将其保存到由 "),a("code",{pre:!0},[s._v("GLSL")]),s._v(" 提供的特殊变量 "),a("code",{pre:!0},[s._v("gl_Position")]),s._v(" 中来返回变换后的顶点。此外，顶点着色器也可以用于哪个决定包含 textl 面部纹理的坐标可以用于顶点；也可以用于通过法线来确定应用到顶点的光照因子等；然后将这些信息存储在 "),a("code",{pre:!0},[s._v("变量（varyings）")]),s._v(" 或 "),a("code",{pre:!0},[s._v("属性（attributes）")]),s._v(" 中，以便与 片段着色器 共享。")])},function(){var s=this,r=s.$createElement,a=s._self._c||r;return a("p",[s._v("举个例子，下面的顶点着色器接收一个 "),a("code",{pre:!0},[s._v("aVertexPosition")]),s._v(" 属性的顶点位置值，然后这个值与两个 4x4"),a("code",{pre:!0},[s._v("（uProjectionMatrix")]),s._v(" 和 "),a("code",{pre:!0},[s._v("uModelMatrix")]),s._v("） 的矩阵相乘赋值给 "),a("code",{pre:!0},[s._v("gl_Position")]),s._v("。")])},function(){var s=this,r=s.$createElement,a=s._self._c||r;return a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-glsl"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("attribute")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-type"}},[s._v("vec4")]),s._v(" aVertexPosition;\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("uniform")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-type"}},[s._v("mat4")]),s._v(" uProjectionMatrix;\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("uniform")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-type"}},[s._v("mat4")]),s._v(" uModelMatrix;\n\n"),a("span",{pre:!0,attrs:{class:"hljs-type"}},[s._v("void")]),s._v(" main() {\n  "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("gl_Position")]),s._v(" = uProjectionMatrix * uModelMatrix * aVertexPosition;\n}\n")])])},function(){var s=this,r=s.$createElement,a=s._self._c||r;return a("p",[s._v("片段着色器 在 顶点着色器处理完图形的顶点后，会被要绘制的"),a("strong",[s._v("每个图形的每个像素点调用一次")]),s._v("。它的职责就是确定每个像素的颜色，通过指定应用到像素的纹理元素（也就是 图形纹理中的像素），获取纹理元素的颜色，然后将适当的光照应用于颜色，之后将颜色存储到 "),a("code",{pre:!0},[s._v("GLSL")]),s._v(" 提供的特殊变量 "),a("code",{pre:!0},[s._v("gl_FragColor")]),s._v(" 中，返回给 "),a("code",{pre:!0},[s._v("WebGL")]),s._v("。该颜色最终会绘制到屏幕上图形对应像素的对应位置。")])},function(){var s=this,r=s.$createElement,a=s._self._c||r;return a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-glsl"}},[a("span",{pre:!0,attrs:{class:"hljs-type"}},[s._v("void")]),s._v(" main() {\n  "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("gl_FragColor")]),s._v(" = "),a("span",{pre:!0,attrs:{class:"hljs-type"}},[s._v("vec4")]),s._v("("),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1.0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1.0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1.0")]),s._v(", "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1.0")]),s._v(");\n}\n")])])},function(){var s=this.$createElement,r=this._self._c||s;return r("p",[this._v("定义完 顶点着色器 和 片段着色器 之后，需要它们传递给 "),r("code",{pre:!0},[this._v("WebGL")]),this._v("。这个过程可以分为两部：")])},function(){var s=this.$createElement,r=this._self._c||s;return r("ol",[r("li",[this._v("上传着色器源码，编译着色器")]),this._v(" "),r("li",[this._v("连接两着色器到着色器程序")])])},function(){var s=this,r=s.$createElement,a=s._self._c||r;return a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 加载 着色器")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("loadShader")]),s._v("("),a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("gl, type, source")]),s._v(") ")]),s._v("{\n  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 0. 创建指定类型的着色器")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" shader = gl.createShader(type)\n\n  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1. 上传源码")]),s._v("\n  gl.shaderSource(shader, source)\n\n  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2. 编译着色器")]),s._v("\n  gl.compileShader(shader)\n\n  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 检测编译状态")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    alert("),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'编译失败！'")]),s._v(", gl.getShaderInfoLog(shader))\n    gl.deleteShader(shader)\n    "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n  }\n\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" shader\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 链接着色器程序")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("initShaderProgram")]),s._v("("),a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("gl, vsSouce, fsSource")]),s._v(") ")]),s._v("{\n  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 0. 创建两类型着色器")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource)\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" fragmentShader = loadShader(gl, gl._FRAGMENT_SHADER, fsSource)\n\n  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1. 附加着色器程序")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" shaderProgram = gl.createProgram()\n  gl.attachShader(shaderProgram, vertexShader)\n  gl.attachShader(shaderProgram, fragmentShader)\n  gl.linkProgram(shaderProgram)\n\n  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 检测链接状态")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n    alert("),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'初始化着色器程序失败'")]),s._v(", gl.getProgramInfoLog(shaderProgram))\n    "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n  }\n\n  "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" shaderProgram\n}\n")])])},function(){var s=this.$createElement,r=this._self._c||s;return r("p",[this._v("在创建着色器程序之后，需要查找 "),r("code",{pre:!0},[this._v("WebGL")]),this._v(" 返回分配的输入位置。")])},function(){var s=this,r=s.$createElement,a=s._self._c||r;return a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-glsl"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("attribute")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-type"}},[s._v("vec4")]),s._v(" aVertexPosition;\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("uniform")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-type"}},[s._v("mat4")]),s._v(" uProjectionMatrix;\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("uniform")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-type"}},[s._v("mat4")]),s._v(" uModelViewMatrix;\n\n"),a("span",{pre:!0,attrs:{class:"hljs-type"}},[s._v("void")]),s._v(" main() {\n  "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("gl_Position")]),s._v(" = uProjectionMatrix * uModelMatrix * aVertexPosition;\n}\n")])])},function(){var s=this,r=s.$createElement,a=s._self._c||r;return a("p",[s._v("在该顶点着色器中，有一个属性 "),a("code",{pre:!0},[s._v("aVertexPosition")]),s._v(" 和 两个 "),a("code",{pre:!0},[s._v("uniforms")]),s._v(" 。属性从缓冲区接收值。顶点着色器每次迭代都从分配给该属性的缓冲区接收下一个值。"),a("code",{pre:!0},[s._v("uniforms")]),s._v(" 类似于 JavaScript 的全局变量，它们在每次迭代中保持相同的值。在 JavaScript 中我们可以这样获取到 "),a("code",{pre:!0},[s._v("glsl")]),s._v(" 中 "),a("code",{pre:!0},[s._v("attribute")]),s._v(" 和 "),a("code",{pre:!0},[s._v("uniforms")]),s._v("（只有找到它，才能为它绑定值）。")])},function(){var s=this,r=s.$createElement,a=s._self._c||r;return a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" programInfo = {\n  "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("program")]),s._v(": shaderProgram,\n  "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("attributeLocations")]),s._v(": {\n    "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("vertexPosition")]),s._v(": gl.getAttribLocation(shaderProgram, "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'aVertexPosition'")]),s._v(")\n  },\n  "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("uniformLocations")]),s._v(": {\n    "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("projectionMatrix")]),s._v(": gl.getUniformLocation(shaderProgram, "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'uProjectionMatrix'")]),s._v("),\n    "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("ModelViewMatrix")]),s._v(": gl.getUniformLocation(shaderProgram, "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'uModelViewMatrix'")]),s._v(")\n  }\n}\n")])])}],!1,null,null,null);r.default=e.exports}}]);